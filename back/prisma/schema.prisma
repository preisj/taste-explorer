generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                 String               @id @unique @default(uuid())
  firstName          String
  lastName           String
  email              String               @unique
  password           String
  role               String
  phone              String
  address            String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  PantryItem         PantryItem[]
  Recipe             Recipe[]
  RecipeComment      RecipeComment[]
  DietaryRestriction DietaryRestriction[]
}

model Cuisine {
  id        String   @id @unique @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  recipes   Recipe[]
}

model PantryItem {
  id         String   @id @unique @default(uuid())
  userId     String
  name       String
  expiration DateTime
  quantity   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
}

model Recipe {
  id            String          @id @unique @default(uuid())
  title         String
  description   String
  instructions  String // Store instructions as JSON-encoded strings
  userId        String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  user          User            @relation(fields: [userId], references: [id])
  RecipeComment RecipeComment[]
  cuisines      Cuisine[]
}

model Ingredient {
  id        String   @id @unique @default(uuid())
  name      String
  tags      String // Store tags as JSON-encoded strings
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  qtd       String
}

model RecipeComment {
  id        String   @id @unique @default(uuid())
  userId    String
  recipeId  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
}

model DietaryRestriction {
  id              String   @id @unique @default(uuid())
  userId          String
  restrictionType String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])
}

model Market {
  id        String   @id @unique @default(uuid())
  name      String
  location  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Book {
  id          String    @id @default(uuid())
  title       String
  author      String
  description String
  price       Float
  type        String
  image       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orders      OrderItem[]
}

model Cart {
  id        String   @id @unique @default(uuid())
  personId    String
  bookId    String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          String    @id @default(uuid())
  personId      String
  completed   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orderItems  OrderItem[]
  totalPrice  Float
}

model OrderItem {
  id         String    @id @default(uuid())
  orderId    String
  bookId     String
  quantity   Int
  price      Float
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  order      Order     @relation(fields: [orderId], references: [id])
  book       Book      @relation(fields: [bookId], references: [id])
}